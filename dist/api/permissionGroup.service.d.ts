/**
 * REST API for Flexicore filtered by your access rights
 * Flexicore REST API
 *
 * OpenAPI spec version: V3.2.0
 * Contact: avishay@flexi-core.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { CreatePermissionGroupLinkRequest } from '../model/createPermissionGroupLinkRequest';
import { CreatePermissionGroupRequest } from '../model/createPermissionGroupRequest';
import { PermissionGroup } from '../model/permissionGroup';
import { PermissionGroupToBaseclass } from '../model/permissionGroupToBaseclass';
import { Configuration } from '../configuration';
import { UpdatePermissionGroup } from '../model/updatePermissionGroup';
import { PaginationResponse, PermissionGroupCopy, PermissionGroupsFilter } from '../model/models';
export declare class PermissionGroupService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: Configuration;
    constructor(httpClient: HttpClient, basePath: string, configuration: Configuration);
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm;
    /**
     * connectPermissionGroupToBaseclass
     * Connects Permission Group To Baseclass
     * @param body
     * @param authenticationkey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    connectPermissionGroupToBaseclass(body?: CreatePermissionGroupLinkRequest, authenticationkey?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<PermissionGroupToBaseclass>>;
    connectPermissionGroupToBaseclass(body?: CreatePermissionGroupLinkRequest, authenticationkey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<PermissionGroupToBaseclass>>>;
    connectPermissionGroupToBaseclass(body?: CreatePermissionGroupLinkRequest, authenticationkey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<PermissionGroupToBaseclass>>>;
    /**
     * createPermissionGroup
     * creates Permission Group
     * @param body
     * @param authenticationkey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    createPermissionGroup(body?: CreatePermissionGroupRequest, authenticationkey?: string, observe?: 'body', reportProgress?: boolean): Observable<PermissionGroup>;
    createPermissionGroup(body?: CreatePermissionGroupRequest, authenticationkey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PermissionGroup>>;
    createPermissionGroup(body?: CreatePermissionGroupRequest, authenticationkey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PermissionGroup>>;
    /**
    * createPermissionGroup
    * creates Permission Group
    * @param body
    * @param authenticationkey
    * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
    * @param reportProgress flag to report request and response progress.
    */
    copyPermissionGroup(body?: PermissionGroupCopy, authenticationkey?: string, observe?: 'body', reportProgress?: boolean): Observable<PermissionGroup>;
    copyPermissionGroup(body?: PermissionGroupCopy, authenticationkey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PermissionGroup>>;
    copyPermissionGroup(body?: PermissionGroupCopy, authenticationkey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PermissionGroup>>;
    /**
   * createPermissionGroup
   * creates Permission Group
   * @param body
   * @param authenticationkey
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
    updatePermissionGroup(body?: UpdatePermissionGroup, authenticationkey?: string, observe?: 'body', reportProgress?: boolean): Observable<PermissionGroup>;
    updatePermissionGroup(body?: UpdatePermissionGroup, authenticationkey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PermissionGroup>>;
    updatePermissionGroup(body?: UpdatePermissionGroup, authenticationkey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PermissionGroup>>;
    /**
     * getAllPermissionGroups
     * lists permission groups
     * @param body
     * @param authenticationkey
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    getAllPermissionGroups(body?: PermissionGroupsFilter, authenticationkey?: string, observe?: 'body', reportProgress?: boolean): Observable<PaginationResponse<PermissionGroup>>;
    getAllPermissionGroups(body?: PermissionGroupsFilter, authenticationkey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationResponse<PermissionGroup>>>;
    getAllPermissionGroups(body?: PermissionGroupsFilter, authenticationkey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationResponse<PermissionGroup>>>;
}
